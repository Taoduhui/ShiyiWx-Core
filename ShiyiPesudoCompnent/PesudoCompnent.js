"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PesudoCompnent = exports.ShiyiCompUIBase = exports.ShiyiCompFuncBase = void 0;
var Task_1 = require("../Task/Task");
var ShiyiComponentExternBase = (function () {
    function ShiyiComponentExternBase() {
    }
    Object.defineProperty(ShiyiComponentExternBase.prototype, "Inst", {
        get: function () {
            return this.CompInstance;
        },
        enumerable: false,
        configurable: true
    });
    ShiyiComponentExternBase.prototype._init = function () {
        this._render = this.CompInstance.Render.bind(this.CompInstance);
        return this;
    };
    ShiyiComponentExternBase.prototype.Render = function (value) {
        this._render(value);
    };
    return ShiyiComponentExternBase;
}());
var ShiyiCompFuncBase = (function (_super) {
    __extends(ShiyiCompFuncBase, _super);
    function ShiyiCompFuncBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ShiyiCompFuncBase;
}(ShiyiComponentExternBase));
exports.ShiyiCompFuncBase = ShiyiCompFuncBase;
var ShiyiCompUIBase = (function (_super) {
    __extends(ShiyiCompUIBase, _super);
    function ShiyiCompUIBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShiyiCompUIBase.prototype._init = function () {
        _super.prototype._init.call(this);
        this.LoadGlobalUIConfig();
        return this;
    };
    ShiyiCompUIBase.prototype.LoadGlobalUIConfig = function () {
    };
    return ShiyiCompUIBase;
}(ShiyiComponentExternBase));
exports.ShiyiCompUIBase = ShiyiCompUIBase;
var PesudoCompnent = (function () {
    function PesudoCompnent(_ComponentId) {
        this.ComponentIdBackup = "";
        this.ComponentId = "";
        this.RegisteredGlobalBackWardBinding = {};
        this.RegisteredSelfBinding = {};
        this.ComponentId = _ComponentId;
        this.ComponentIdBackup = _ComponentId;
    }
    Object.defineProperty(PesudoCompnent.prototype, "Inst", {
        get: function () {
            return this.PageInstance;
        },
        enumerable: false,
        configurable: true
    });
    PesudoCompnent.prototype.AnimateTask = function (selector, keyFrames, duration) {
        var _this = this;
        return new Task_1.Task(function (task) {
            _this.animate(selector, keyFrames, duration, function () {
                task.Continue();
            });
        }, true);
    };
    PesudoCompnent.prototype.Init = function () {
        this.UI.CompInstance = this;
        this.Func.CompInstance = this;
        return this;
    };
    PesudoCompnent.prototype.SetVisibility = function (visible) {
        this.Render({
            "Visible": visible
        });
    };
    PesudoCompnent.prototype.Render = function (value) {
        var _this = this;
        var RealValue = {};
        Object.keys(value).forEach(function (key) {
            RealValue[_this.ComponentId + key] = value[key];
        });
        this._render(RealValue);
    };
    PesudoCompnent.prototype.BindGlobal = function (GlobalData, SelfDataKey, PreProcess) {
        this.Inst.BindGlobal(GlobalData, this.ComponentId + SelfDataKey, PreProcess);
    };
    PesudoCompnent.prototype.BindGlobalBackward = function (SelfDataKey, GlobalDataObj, PreProcess) {
        this.Inst.BindGlobalBackward(this.ComponentId + SelfDataKey, GlobalDataObj, PreProcess);
    };
    PesudoCompnent.prototype.BindGlobalTwoWay = function (SelfDataKey, GlobalDataObj, SelfToGlobalPreProcess, GlobalToSelfPreProcess) {
        this.BindGlobal(GlobalDataObj, SelfDataKey, GlobalToSelfPreProcess);
        this.BindGlobalBackward(SelfDataKey, GlobalDataObj, SelfToGlobalPreProcess);
    };
    PesudoCompnent.prototype.BindSelf = function (SrcKey, TargetKey, PreProcess) {
        this.Inst.BindSelf(this.ComponentId + SrcKey, this.ComponentId + TargetKey, PreProcess);
    };
    PesudoCompnent.prototype.BindSelfTwoWay = function (FirstData, SecData, FirstToSecPreProcess, SecToFirstPreProcess) {
        this.BindSelf(FirstData, SecData, FirstToSecPreProcess);
        this.BindSelf(SecData, FirstData, SecToFirstPreProcess);
    };
    PesudoCompnent.prototype.GetAllComponents = function () {
        var _this = this;
        var AllComps = {};
        var comps = this.PesudoCompnents;
        if (!comps) {
            return {};
        }
        Object.keys(comps).forEach(function (key) {
            comps[key].ComponentId = _this.ComponentIdBackup + comps[key].ComponentIdBackup;
            AllComps[comps[key].ComponentId] = comps[key];
            var subcomps = comps[key].GetAllComponents();
            Object.keys(subcomps).forEach(function (subkey) {
                AllComps[subkey] = subcomps[subkey];
            });
        });
        return AllComps;
    };
    PesudoCompnent.prototype._onReady = function () {
        this.UI._init().InitCustomData();
        this.Func._init().InitCustomData();
        this.Ready();
    };
    PesudoCompnent.prototype.Ready = function () { };
    return PesudoCompnent;
}());
exports.PesudoCompnent = PesudoCompnent;
//# sourceMappingURL=data:application/json;base64,