"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncGroup = exports.SaveCookies = exports.ParseCookie = exports.CreateRecordInstance = exports.Guid = exports.nameof = exports.ShiyiDebug = exports.Debug = exports.KeyValuePair = void 0;
var Storage_Config_1 = require("../Config/StorageConfig/Storage.Config");
var Utils_Config_1 = require("../Config/UtilsConfig/Utils.Config");
var KeyValuePair = (function () {
    function KeyValuePair(_key, _value) {
        this.Key = _key;
        this.Value = _value;
    }
    return KeyValuePair;
}());
exports.KeyValuePair = KeyValuePair;
function Debug(level) {
    if (Utils_Config_1.DebugLevel == 0) {
        return function () {
            var _ = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _[_i] = arguments[_i];
            }
        };
    }
    else if (level <= Utils_Config_1.DebugLevel) {
        return console.log;
    }
    return function () {
        var _ = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _[_i] = arguments[_i];
        }
    };
}
exports.Debug = Debug;
function ShiyiDebug(level) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (level == 0) {
        return;
    }
    else if (level <= Utils_Config_1.DebugLevel) {
        Debug(3)(args);
    }
}
exports.ShiyiDebug = ShiyiDebug;
var nameof = function (name) { return name; };
exports.nameof = nameof;
var Guid = (function () {
    function Guid(value) {
        this.value = this.empty;
        if (value) {
            if (Guid.isValid(value)) {
                this.value = value;
            }
        }
    }
    Guid.newGuid = function () {
        return new Guid('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = (c == 'x') ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        }));
    };
    Object.defineProperty(Guid, "empty", {
        get: function () {
            return '00000000-0000-0000-0000-000000000000';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Guid.prototype, "empty", {
        get: function () {
            return Guid.empty;
        },
        enumerable: false,
        configurable: true
    });
    Guid.isValid = function (str) {
        var validRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        return validRegex.test(str);
    };
    Guid.prototype.toString = function () {
        return this.value;
    };
    Guid.prototype.toJSON = function () {
        return this.value;
    };
    return Guid;
}());
exports.Guid = Guid;
function CreateRecordInstance(instance) {
    var ResRecord = {};
    var Proto = instance;
    while (Proto) {
        Object.keys(Proto).map(function (key) {
            if (!ResRecord[key]) {
                if (typeof Proto[key] === 'function') {
                    ResRecord[key] = Proto[key].bind(instance);
                }
                else {
                }
            }
        });
        Proto = Object.getPrototypeOf(Proto);
    }
    return ResRecord;
}
exports.CreateRecordInstance = CreateRecordInstance;
function ParseCookie(cookieStr) {
    var cookieStrArr = cookieStr.split('=');
    var key = cookieStrArr[0];
    var value = cookieStrArr[1].split(';')[0];
    return new KeyValuePair(key, value);
}
exports.ParseCookie = ParseCookie;
function SaveCookies(NewCookies) {
    if (NewCookies.length > 0) {
        var cookiesMap = {};
        if (wx.getStorageSync(Storage_Config_1.StorageKey.Cookies)) {
            cookiesMap = JSON.parse(wx.getStorageSync(Storage_Config_1.StorageKey.Cookies));
        }
        for (var i = 0; i < NewCookies.length; i++) {
            var cookie = ParseCookie(NewCookies[i]);
            cookiesMap[cookie.Key] = cookie.Value;
        }
        wx.setStorageSync(Storage_Config_1.StorageKey.Cookies, JSON.stringify(cookiesMap));
    }
}
exports.SaveCookies = SaveCookies;
var AsyncGroup = (function () {
    function AsyncGroup(_asyncFuncMap) {
        this.ResultMap = new Map();
        this.lock = false;
        this.AsyncFuncMap = _asyncFuncMap;
        this.CompletedCnt = this.AsyncFuncMap.size;
    }
    AsyncGroup.prototype.Run = function () {
        var _this = this;
        this.AsyncFuncMap.forEach(function (func, key) {
            func(function (result) {
                _this.ResultMap.set(key, result);
                _this.CheckComplete();
            });
        });
        return this;
    };
    AsyncGroup.prototype.ContinueWith = function (callback) {
        this.Complete = callback;
        return this;
    };
    AsyncGroup.prototype.CheckComplete = function () {
        while (this.lock) { }
        this.lock = true;
        this.CompletedCnt--;
        if (this.CompletedCnt == 0) {
            this.Complete(this.ResultMap);
        }
        this.lock = false;
    };
    return AsyncGroup;
}());
exports.AsyncGroup = AsyncGroup;
//# sourceMappingURL=data:application/json;base64,