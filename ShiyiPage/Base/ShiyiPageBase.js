"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShiyiPageBase = exports.ShiyiPageUIBase = exports.ShiyiPageFuncBase = void 0;
var Router_1 = require("../../Router/Router");
var GlobalData_1 = require("../../../GlobalData/GlobalData");
var ShiyiPageExternBase = (function () {
    function ShiyiPageExternBase() {
    }
    Object.defineProperty(ShiyiPageExternBase.prototype, "Inst", {
        get: function () {
            return this.PageInstance;
        },
        enumerable: false,
        configurable: true
    });
    ShiyiPageExternBase.prototype.Init = function () {
        this._Render = this.PageInstance.Render.bind(this.PageInstance);
        this.data = this.PageInstance.data;
        return this;
    };
    ShiyiPageExternBase.prototype.Render = function (value) {
        this._Render(value);
    };
    return ShiyiPageExternBase;
}());
var ShiyiPageFuncBase = (function (_super) {
    __extends(ShiyiPageFuncBase, _super);
    function ShiyiPageFuncBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ShiyiPageFuncBase;
}(ShiyiPageExternBase));
exports.ShiyiPageFuncBase = ShiyiPageFuncBase;
var ShiyiPageUIBase = (function (_super) {
    __extends(ShiyiPageUIBase, _super);
    function ShiyiPageUIBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShiyiPageUIBase.prototype.Init = function () {
        _super.prototype.Init.call(this);
        this.LoadGlobalUIConfig();
        return this;
    };
    ShiyiPageUIBase.prototype.LoadGlobalUIConfig = function () {
        this.PageInstance.BindGlobal(GlobalData_1.GlobalData.Theme, "Theme", function (value) {
            return value ? "Boy" : "Girl";
        });
    };
    return ShiyiPageUIBase;
}(ShiyiPageExternBase));
exports.ShiyiPageUIBase = ShiyiPageUIBase;
var ShiyiPageBase = (function () {
    function ShiyiPageBase() {
        this.RegisteredEventHandlers = {};
        this.ObserverList = {};
        this.RegisteredGlobalBackWardBinding = {};
        this.RegisteredSelfBinding = {};
        this.ComponentDataKeyPair = {};
    }
    ShiyiPageBase.prototype.BindEvent = function (Trigger, Handler) {
        this.AddHandler(Trigger, Handler);
    };
    ShiyiPageBase.prototype.AddHandler = function (Trigger, Handler) {
        this.RegisteredEventHandlers[Trigger] = Handler;
    };
    ShiyiPageBase.prototype.Removehandler = function (Trigger, Handler) {
        if (this.RegisteredEventHandlers[Trigger] === Handler) {
            delete this.RegisteredEventHandlers[Trigger];
        }
    };
    ShiyiPageBase.prototype.EventHandler = function (e) {
        e.Catch();
        var Handler = this.RegisteredEventHandlers[e.EventName];
        console.log(Handler);
        if (Handler) {
            Handler(e);
        }
        else {
            e.Pass();
        }
    };
    ShiyiPageBase.prototype.AddObserver = function (data, target) {
        this.ObserverList[data.DataKey] = target;
        data.Bind(this);
    };
    ShiyiPageBase.prototype.RemoveObserver = function (data) {
        if (this.ObserverList[data.DataKey]) {
            delete this.ObserverList[data.DataKey];
        }
    };
    ShiyiPageBase.prototype.ObserverNotify = function (key, value) {
        var _a;
        var target = this.ObserverList[key];
        if (target) {
            this.RenderNoBackward((_a = {},
                _a[target.name] = target.PreProcess ? target.PreProcess(value) : value,
                _a));
        }
    };
    ShiyiPageBase.prototype.BindGlobal = function (GlobalData, SelfDataKey, PreProcess) {
        this.AddObserver(GlobalData, {
            name: SelfDataKey,
            PreProcess: PreProcess
        });
    };
    ShiyiPageBase.prototype.BindGlobalBackward = function (SelfDataKey, GlobalDataObj, PreProcess) {
        if (!this.RegisteredGlobalBackWardBinding[SelfDataKey]) {
            this.RegisteredGlobalBackWardBinding[SelfDataKey] = new Array();
        }
        this.RegisteredGlobalBackWardBinding[SelfDataKey].push({
            "TargetDataObj": GlobalDataObj,
            "PreProcess": PreProcess
        });
    };
    ShiyiPageBase.prototype.BindGlobalTwoWay = function (SelfDataKey, GlobalDataObj, SelfToGlobalPreProcess, GlobalToSelfPreProcess) {
        this.BindGlobal(GlobalDataObj, SelfDataKey, GlobalToSelfPreProcess);
        this.BindGlobalBackward(SelfDataKey, GlobalDataObj, SelfToGlobalPreProcess);
    };
    ShiyiPageBase.prototype.BindSelf = function (SrcKey, TargetKey, PreProcess) {
        if (!this.RegisteredSelfBinding[SrcKey]) {
            this.RegisteredSelfBinding[SrcKey] = new Array();
        }
        this.RegisteredSelfBinding[SrcKey].push({
            name: TargetKey,
            PreProcess: PreProcess
        });
    };
    ShiyiPageBase.prototype.BindSelfTwoWay = function (FirstData, SecData, FirstToSecPreProcess, SecToFirstPreProcess) {
        this.BindSelf(FirstData, SecData, FirstToSecPreProcess);
        this.BindSelf(SecData, FirstData, SecToFirstPreProcess);
    };
    ShiyiPageBase.prototype.Render = function (value) {
        this._render(value, false);
    };
    ShiyiPageBase.prototype.RenderNoBackward = function (value) {
        this._render(value, true);
    };
    ShiyiPageBase.prototype._render = function (value, DisableBackward) {
        var _this = this;
        var Modified = false;
        var Keys = Object.keys(value);
        Keys.forEach(function (key) {
            if (_this.ComponentDataKeyPair[key]) {
                _this.ComponentDataKeyPair[key].CompInst.data[_this.ComponentDataKeyPair[key].key] = value[key];
            }
            if (_this.RegisteredSelfBinding[key]) {
                _this.RegisteredSelfBinding[key].forEach(function (target) {
                    if (Keys.indexOf(target.name) < 0) {
                        Modified = true;
                        if (target.PreProcess) {
                            value[target.name] = target.PreProcess(value[key]);
                        }
                        else {
                            value[target.name] = value[key];
                        }
                    }
                });
            }
            if (!DisableBackward && _this.RegisteredGlobalBackWardBinding[key]) {
                _this.RegisteredGlobalBackWardBinding[key].forEach(function (target) {
                    target.TargetDataObj.Set(target.PreProcess ?
                        target.PreProcess(value[key]) :
                        value[key]);
                });
            }
        });
        if (Modified) {
            this._render(value, DisableBackward);
            return;
        }
        this.setData(value);
    };
    ShiyiPageBase.prototype.LoadPesudoComponents = function () {
        var _this = this;
        var BaseFunctions = Object.keys(this);
        var components = this.PesudoCompnents;
        Object.keys(components).forEach(function (key) {
            var Comp = components[key];
            Comp.PageInstance = _this;
            Comp._render = _this.Render.bind(_this);
            var CompProto = Comp;
            var CompId = components[key].ComponentId;
            while (CompProto) {
                Object.keys(CompProto).forEach(function (key) {
                    if (typeof CompProto[key] == "function") {
                        _this[CompId + key] = CompProto[key].bind(Comp);
                    }
                });
                CompProto = Object.getPrototypeOf(CompProto);
            }
            var CompData = {};
            var MappingCompData = {};
            Object.keys(components[key].data).forEach(function (datakey) {
                CompData[CompId + datakey] = components[key].data[datakey];
                _this.ComponentDataKeyPair[CompId + datakey] = {
                    key: datakey,
                    CompInst: components[key]
                };
            });
            _this.Render(CompData);
            Comp.Init();
        });
    };
    ShiyiPageBase.prototype.DataChange = function (e) {
        var model = e;
        var path = model.currentTarget.dataset.key.split(".");
        var data = {};
        var root = data;
        for (var i = 0; i < path.length; i++) {
            if (i == path.length - 1) {
                data[path[i]] = model.detail.value;
                continue;
            }
            if (typeof data[path[i]] == "number") {
                data[path[i]] = Number(this.data[path[i]]);
            }
            else {
                data[path[i]] = this.data[path[i]];
            }
            data = data[path[i]];
        }
        this.Render(root);
    };
    ShiyiPageBase.prototype.LoadExtends = function () {
        this.Func.PageInstance = this;
        this.Func.Init();
        this.UI.PageInstance = this;
        this.UI.Init();
        this.UI.InitCustomData();
        this.Func.InitCustomData();
    };
    ShiyiPageBase.prototype.onLoad = function () {
        this.InParameter = Router_1.Router.NavigateParam;
        Router_1.Router.PageLoad(this);
        if (this.Loaded) {
            this.Loaded();
        }
        this.LoadPesudoComponents();
        this.LoadExtends();
    };
    ShiyiPageBase.prototype.onUnload = function () {
        Router_1.Router.PageUnload();
    };
    return ShiyiPageBase;
}());
exports.ShiyiPageBase = ShiyiPageBase;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2hpeWlQYWdlQmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNoaXlpUGFnZUJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsOENBQTZDO0FBRTdDLDZEQUE0RDtBQU81RDtJQU9JO0lBQ0EsQ0FBQztJQU5ELHNCQUFXLHFDQUFJO2FBQWY7WUFDSSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDN0IsQ0FBQzs7O09BQUE7SUFNTSxrQ0FBSSxHQUFYO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFDbkMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUdNLG9DQUFNLEdBQWIsVUFBa0MsS0FBb0M7UUFDbEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBQ0wsMEJBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDO0FBRUQ7SUFBNkUscUNBQTBCO0lBQXZHOztJQUNBLENBQUM7SUFBRCx3QkFBQztBQUFELENBQUMsQUFERCxDQUE2RSxtQkFBbUIsR0FDL0Y7QUFEcUIsOENBQWlCO0FBR3ZDO0lBQTJFLG1DQUEwQjtJQUFyRzs7SUFhQSxDQUFDO0lBWlUsOEJBQUksR0FBWDtRQUNJLGlCQUFNLElBQUksV0FBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNNLDRDQUFrQixHQUF6QjtRQUNJLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLHVCQUFVLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFDbEQsVUFBQyxLQUFjO1lBQ1gsT0FBTyxLQUFLLENBQUMs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LElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBSU0sOEJBQU0sR0FBYjtRQUNJLElBQUksQ0FBQyxXQUFXLEdBQUcsZUFBTSxDQUFDLGFBQWEsQ0FBQztRQUN4QyxlQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNqQjtRQUNELElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0sZ0NBQVEsR0FBZjtRQUNJLGVBQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBQ0wsb0JBQUM7QUFBRCxDQUFDLEFBdlNELElBdVNDO0FBdlNxQixzQ0FBYTtBQXVTbEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50IH0gZnJvbSBcIi4uLy4uL0V2ZW50L0V2ZW50XCI7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCIuLi8uLi9Sb3V0ZXIvUm91dGVyXCI7XHJcbmltcG9ydCB7IERhdGEgfSBmcm9tIFwiLi4vLi4vRGF0YS9EYXRhXCI7XHJcbmltcG9ydCB7IEdsb2JhbERhdGEgfSBmcm9tIFwiLi4vLi4vLi4vR2xvYmFsRGF0YS9HbG9iYWxEYXRhXCI7XHJcbmltcG9ydCB7IFBlc3Vkb0NvbXBuZW50IH0gZnJvbSBcIi4uLy4uL1NoaXlpUGVzdWRvQ29tcG5lbnQvUGVzdWRvQ29tcG5lbnRcIjtcclxuaW1wb3J0IHsgRGF0YUNoYW5nZU9wdGlvbiB9IGZyb20gXCIuLi8uLi9VSS9Nb2RlbC9EYXRhQ2hhbmdlTW9kZWwvRGF0YUNoYW5nZU1vZGVsXCI7XHJcbmltcG9ydCB7IEl1aU9wdGlvbiB9IGZyb20gXCIuLi8uLi9VSS9Nb2RlbC9JdWlPcHRpb25cIjtcclxuaW1wb3J0IHsgQ3VzdG9tR2xvYmFsUGFnZURhdGEgfSBmcm9tIFwiLi4vLi4vQ29uZmlnL1NoaXlpUGFnZUNvbmZpZy9TaGl5aVBhZ2UuQ29uZmlnXCI7XHJcblxyXG5cclxuYWJzdHJhY3QgY2xhc3MgU2hpeWlQYWdlRXh0ZXJuQmFzZTxQYWdlVCBleHRlbmRzIFNoaXlpUGFnZUJhc2U+IHtcclxuICAgIHB1YmxpYyBQYWdlSW5zdGFuY2UhOiBQYWdlVFxyXG4gICAgcHVibGljIGdldCBJbnN0KCk6IFBhZ2VUIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5QYWdlSW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgX1JlbmRlciE6ICh2YWx1ZTogUmVjb3JkPHN0cmluZywgYW55PikgPT4gdm9pZDtcclxuICAgIHB1YmxpYyBkYXRhITogUmVjb3JkPHN0cmluZywgYW55PjtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBJbml0KCk6IFNoaXlpUGFnZUV4dGVybkJhc2U8UGFnZVQ+IHtcclxuICAgICAgICB0aGlzLl9SZW5kZXIgPSB0aGlzLlBhZ2VJbnN0YW5jZS5SZW5kZXIuYmluZCh0aGlzLlBhZ2VJbnN0YW5jZSk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5QYWdlSW5zdGFuY2UuZGF0YTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBJbml0Q3VzdG9tRGF0YShfb3B0aW9ucz86IFJlY29yZDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQpOiB2b2lkO1xyXG5cclxuICAgIHB1YmxpYyBSZW5kZXI8VCBleHRlbmRzIFBhZ2VEYXRhPih2YWx1ZTogUGFydGlhbDxSZWNvcmQ8a2V5b2YgVCwgYW55Pj4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9SZW5kZXIodmFsdWUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU2hpeWlQYWdlRnVuY0Jhc2U8UGFnZVQgZXh0ZW5kcyBTaGl5aVBhZ2VCYXNlPiBleHRlbmRzIFNoaXlpUGFnZUV4dGVybkJhc2U8UGFnZVQ+IHtcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNoaXlpUGFnZVVJQmFzZTxQYWdlVCBleHRlbmRzIFNoaXlpUGFnZUJhc2U+IGV4dGVuZHMgU2hpeWlQYWdlRXh0ZXJuQmFzZTxQYWdlVD4ge1xyXG4gICAgcHVibGljIEluaXQoKTogU2hpeWlQYWdlRXh0ZXJuQmFzZTxQYWdlVD4ge1xyXG4gICAgICAgIHN1cGVyLkluaXQoKTtcclxuICAgICAgICB0aGlzLkxvYWRHbG9iYWxVSUNvbmZpZygpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIExvYWRHbG9iYWxVSUNvbmZpZygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLlBhZ2VJbnN0YW5jZS5CaW5kR2xvYmFsKEdsb2JhbERhdGEuVGhlbWUsIFwiVGhlbWVcIixcclxuICAgICAgICAgICAgKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPyBcIkJveVwiIDogXCJHaXJsXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFnZURhdGEgZXh0ZW5kcyBDdXN0b21HbG9iYWxQYWdlRGF0YSB7XHJcbiAgICBcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQZXN1ZG9Db21wbmVudFN0YWNrIHtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2hpeWlQYWdlQmFzZSBleHRlbmRzIFdlY2hhdE1pbmlwcm9ncmFtLlBhZ2UuSW5zdGFuY2VNZXRob2RzPFdlY2hhdE1pbmlwcm9ncmFtLkNvbXBvbmVudC5EYXRhT3B0aW9uPiB7XHJcblxyXG59XHJcblxyXG5pbnRlcmZhY2UgT2JzZXJ2ZXJUYXJnZXQ8RGF0YVQ+IHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIFByZVByb2Nlc3M/OiAodmFsdWU6IERhdGFUKSA9PiBhbnk7XHJcbn1cclxuXHJcbmludGVyZmFjZSBPYnNlcnZlckJhY2t3YXJkVGFyZ2V0PERhdGFUPiB7XHJcbiAgICBUYXJnZXREYXRhT2JqOiBEYXRhPGFueT47XHJcbiAgICBQcmVQcm9jZXNzPzogKHZhbHVlOiBEYXRhVCkgPT4gYW55O1xyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTaGl5aVBhZ2VCYXNlXHJcbiAgICBpbXBsZW1lbnRzIFdlY2hhdE1pbmlwcm9ncmFtLlBhZ2UuT3B0aW9uczxcclxuICAgIFdlY2hhdE1pbmlwcm9ncmFtLlBhZ2UuRGF0YU9wdGlvbixcclxuICAgIFdlY2hhdE1pbmlwcm9ncmFtLlBhZ2UuQ3VzdG9tT3B0aW9uXHJcbiAgICA+e1xyXG4gICAgcHVibGljIGRhdGEhOiBQYWdlRGF0YTtcclxuICAgIHB1YmxpYyBGdW5jITogU2hpeWlQYWdlRXh0ZXJuQmFzZTxTaGl5aVBhZ2VCYXNlPjtcclxuICAgIHB1YmxpYyBVSSE6IFNoaXlpUGFnZUV4dGVybkJhc2U8U2hpeWlQYWdlQmFzZT47XHJcbiAgICAvLyNyZWdpb24g5LqL5Lu25aSE55CGXHJcbiAgICBwdWJsaWMgUmVnaXN0ZXJlZEV2ZW50SGFuZGxlcnM6IFJlY29yZDxzdHJpbmcsIChlOiBFdmVudCkgPT4gdm9pZD4gPSB7fTtcclxuICAgIHB1YmxpYyBQZXN1ZG9Db21wbmVudHMhOiBQZXN1ZG9Db21wbmVudFN0YWNrO1xyXG4gICAgcHJvdGVjdGVkIExvYWRlZD86ICgpID0+IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIOe7keWumuS6i+S7tuWkhOeQhuaWueazlVxyXG4gICAgICogQHBhcmFtIFRyaWdnZXIg5LqL5Lu25ZCNXHJcbiAgICAgKiBAcGFyYW0gSGFuZGxlciDlpITnkIbmlrnms5VcclxuICAgICAqL1xyXG4gICAgcHVibGljIEJpbmRFdmVudChUcmlnZ2VyOiBzdHJpbmcsIEhhbmRsZXI6IChlOiBFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuQWRkSGFuZGxlcihUcmlnZ2VyLCBIYW5kbGVyKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBBZGRIYW5kbGVyKFRyaWdnZXI6IHN0cmluZywgSGFuZGxlcjogKGU6IEV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5SZWdpc3RlcmVkRXZlbnRIYW5kbGVyc1tUcmlnZ2VyXSA9IEhhbmRsZXI7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgUmVtb3ZlaGFuZGxlcihUcmlnZ2VyOiBzdHJpbmcsIEhhbmRsZXI6IChlOiBFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLlJlZ2lzdGVyZWRFdmVudEhhbmRsZXJzW1RyaWdnZXJdID09PSBIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLlJlZ2lzdGVyZWRFdmVudEhhbmRsZXJzW1RyaWdnZXJdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgRXZlbnRIYW5kbGVyKGU6IEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgZS5DYXRjaCgpO1xyXG4gICAgICAgIGxldCBIYW5kbGVyID0gdGhpcy5SZWdpc3RlcmVkRXZlbnRIYW5kbGVyc1tlLkV2ZW50TmFtZV07XHJcbiAgICAgICAgY29uc29sZS5sb2coSGFuZGxlcik7XHJcbiAgICAgICAgaWYgKEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgSGFuZGxlcihlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlLlBhc3MoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAvLyNyZWdpb24g5pWw5o2u57uR5a6aXHJcbiAgICBwcml2YXRlIE9ic2VydmVyTGlzdDogUmVjb3JkPHN0cmluZywgT2JzZXJ2ZXJUYXJnZXQ8YW55Pj4gPSB7fTtcclxuICAgIC8qKlxyXG4gICAgICog5YWo5bGA5pWw5o2u57uR5a6aXHJcbiAgICAgKiBAcGFyYW0gZGF0YSDnu5HlrprmlbDmja7mupBcclxuICAgICAqIEBwYXJhbSB0YXJnZXQg57uR5a6a5pys6aG16Z2i55qE5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBBZGRPYnNlcnZlcjxEYXRhVD4oZGF0YTogRGF0YTxEYXRhVD4sIHRhcmdldDogT2JzZXJ2ZXJUYXJnZXQ8RGF0YVQ+KSB7XHJcbiAgICAgICAgdGhpcy5PYnNlcnZlckxpc3RbZGF0YS5EYXRhS2V5XSA9IHRhcmdldDtcclxuICAgICAgICBkYXRhLkJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFJlbW92ZU9ic2VydmVyPERhdGFUPihkYXRhOiBEYXRhPERhdGFUPikge1xyXG4gICAgICAgIGlmICh0aGlzLk9ic2VydmVyTGlzdFtkYXRhLkRhdGFLZXldKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLk9ic2VydmVyTGlzdFtkYXRhLkRhdGFLZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgT2JzZXJ2ZXJOb3RpZnkoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0gdGhpcy5PYnNlcnZlckxpc3Rba2V5XTtcclxuICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuUmVuZGVyTm9CYWNrd2FyZCh7XHJcbiAgICAgICAgICAgICAgICBbdGFyZ2V0Lm5hbWVdOiB0YXJnZXQuUHJlUHJvY2VzcyA/IHRhcmdldC5QcmVQcm9jZXNzKHZhbHVlKSA6IHZhbHVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhajlsYDmlbDmja7nu5HlrppcclxuICAgICAqIEB0eXBlIHtHbG9iYWxEYXRhVH0g5YWo5bGA5pWw5o2u57G75Z6LXHJcbiAgICAgKiBAdHlwZSB7VH0g6aG16Z2i5Lit5rS+55Sf6IeqUGFnZURhdGHnmoRkYXRh57G75Z6LXHJcbiAgICAgKiBAcGFyYW0gR2xvYmFsRGF0YSDlhajlsYDmlbDmja5PYmplY3RcclxuICAgICAqIEBwYXJhbSBTZWxmRGF0YUtleSDoh6rouqvmlbDmja5LZXlcclxuICAgICAqIEBwYXJhbSBQcmVQcm9jZXNzIOmihOWkhOeQhuaWueW8j1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgQmluZEdsb2JhbDxHbG9iYWxEYXRhVCwgVCBleHRlbmRzIFBhZ2VEYXRhPihcclxuICAgICAgICBHbG9iYWxEYXRhOiBEYXRhPEdsb2JhbERhdGFUPixcclxuICAgICAgICBTZWxmRGF0YUtleToga2V5b2YgVCxcclxuICAgICAgICBQcmVQcm9jZXNzPzogKHZhbHVlOiBHbG9iYWxEYXRhVCkgPT4gYW55KSB7XHJcbiAgICAgICAgdGhpcy5BZGRPYnNlcnZlcjxHbG9iYWxEYXRhVD4oR2xvYmFsRGF0YSwge1xyXG4gICAgICAgICAgICBuYW1lOiBTZWxmRGF0YUtleSBhcyBzdHJpbmcsXHJcbiAgICAgICAgICAgIFByZVByb2Nlc3M6IFByZVByb2Nlc3NcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgUmVnaXN0ZXJlZEdsb2JhbEJhY2tXYXJkQmluZGluZzogUmVjb3JkPHN0cmluZywgQXJyYXk8T2JzZXJ2ZXJCYWNrd2FyZFRhcmdldDxhbnk+Pj4gPSB7fTtcclxuXHJcbiAgICBwdWJsaWMgQmluZEdsb2JhbEJhY2t3YXJkPFNlbGZEYXRhVCwgVCBleHRlbmRzIFBhZ2VEYXRhPihcclxuICAgICAgICBTZWxmRGF0YUtleToga2V5b2YgVCxcclxuICAgICAgICBHbG9iYWxEYXRhT2JqOiBEYXRhPGFueT4sXHJcbiAgICAgICAgUHJlUHJvY2Vzcz86ICh2YWx1ZTogU2VsZkRhdGFUKSA9PiBhbnkpIHtcclxuICAgICAgICBpZiAoIXRoaXMuUmVnaXN0ZXJlZEdsb2JhbEJhY2tXYXJkQmluZGluZ1tTZWxmRGF0YUtleSBhcyBzdHJpbmddKSB7XHJcbiAgICAgICAgICAgIHRoaXMuUmVnaXN0ZXJlZEdsb2JhbEJhY2tXYXJkQmluZGluZ1tTZWxmRGF0YUtleSBhcyBzdHJpbmddID0gbmV3IEFycmF5PE9ic2VydmVyQmFja3dhcmRUYXJnZXQ8YW55Pj4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5SZWdpc3RlcmVkR2xvYmFsQmFja1dhcmRCaW5kaW5nW1NlbGZEYXRhS2V5IGFzIHN0cmluZ10ucHVzaCh7XHJcbiAgICAgICAgICAgIFwiVGFyZ2V0RGF0YU9ialwiOiBHbG9iYWxEYXRhT2JqLFxyXG4gICAgICAgICAgICBcIlByZVByb2Nlc3NcIjogUHJlUHJvY2Vzc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YWo5bGA5pWw5o2u5Y+M5ZCR57uR5a6aXHJcbiAgICAgKiBAcGFyYW0gU2VsZkRhdGFLZXkg6Ieq6Lqr5pWw5o2uS2V5XHJcbiAgICAgKiBAcGFyYW0gR2xvYmFsRGF0YU9iaiDlhajlsYDmlbDmja5PYmplY3RcclxuICAgICAqIEBwYXJhbSBTZWxmVG9HbG9iYWxQcmVQcm9jZXNzIOiHqui6q+aVsOaNruWIsOWFqOWxgOaVsOaNrueahOmihOWkhOeQhlxyXG4gICAgICogQHBhcmFtIEdsb2JhbFRvU2VsZlByZVByb2Nlc3Mg5YWo5bGA5pWw5o2u5Yiw6Ieq6Lqr5pWw5o2u55qE6aKE5aSE55CGXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBCaW5kR2xvYmFsVHdvV2F5PFNlbGZEYXRhVCwgR2xvYmFsRGF0YVQsIFQgZXh0ZW5kcyBQYWdlRGF0YT4oXHJcbiAgICAgICAgU2VsZkRhdGFLZXk6IGtleW9mIFQsXHJcbiAgICAgICAgR2xvYmFsRGF0YU9iajogRGF0YTxHbG9iYWxEYXRhVD4sXHJcbiAgICAgICAgU2VsZlRvR2xvYmFsUHJlUHJvY2Vzcz86ICh2YWx1ZTogU2VsZkRhdGFUKSA9PiBHbG9iYWxEYXRhVCxcclxuICAgICAgICBHbG9iYWxUb1NlbGZQcmVQcm9jZXNzPzogKHZhbHVlOiBHbG9iYWxEYXRhVCkgPT4gU2VsZkRhdGFUKSB7XHJcbiAgICAgICAgdGhpcy5CaW5kR2xvYmFsPEdsb2JhbERhdGFULCBUPihHbG9iYWxEYXRhT2JqLCBTZWxmRGF0YUtleSwgR2xvYmFsVG9TZWxmUHJlUHJvY2Vzcyk7XHJcbiAgICAgICAgdGhpcy5CaW5kR2xvYmFsQmFja3dhcmQ8U2VsZkRhdGFULCBUPihTZWxmRGF0YUtleSwgR2xvYmFsRGF0YU9iaiwgU2VsZlRvR2xvYmFsUHJlUHJvY2Vzcyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgUmVnaXN0ZXJlZFNlbGZCaW5kaW5nOiBSZWNvcmQ8c3RyaW5nLCBBcnJheTxPYnNlcnZlclRhcmdldDxhbnk+Pj4gPSB7fTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOmhtemdouaVsOaNruiHque7keWumlxyXG4gICAgICogQHR5cGUge1NyY0RhdGFUfSDmupDmlbDmja7nsbvlnotcclxuICAgICAqIEB0eXBlIHtUfSDpobXpnaLkuK3mtL7nlJ/oh6pQYWdlRGF0YeeahGRhdGHnsbvlnotcclxuICAgICAqIEBwYXJhbSBTcmNLZXkg5rqQ5pWw5o2uS2V5XHJcbiAgICAgKiBAcGFyYW0gVGFyZ2V0S2V5IOebruagh+aVsOaNrktleVxyXG4gICAgICogQHBhcmFtIFByZVByb2Nlc3Mg6aKE5aSE55CG5pa55byPXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBCaW5kU2VsZjxTcmNEYXRhVCwgVCBleHRlbmRzIFBhZ2VEYXRhPihTcmNLZXk6IGtleW9mIFQsIFRhcmdldEtleToga2V5b2YgVCwgUHJlUHJvY2Vzcz86ICh2YWx1ZTogU3JjRGF0YVQpID0+IGFueSkge1xyXG4gICAgICAgIGlmICghdGhpcy5SZWdpc3RlcmVkU2VsZkJpbmRpbmdbU3JjS2V5IGFzIHN0cmluZ10pIHtcclxuICAgICAgICAgICAgdGhpcy5SZWdpc3RlcmVkU2VsZkJpbmRpbmdbU3JjS2V5IGFzIHN0cmluZ10gPSBuZXcgQXJyYXk8T2JzZXJ2ZXJUYXJnZXQ8YW55Pj4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5SZWdpc3RlcmVkU2VsZkJpbmRpbmdbU3JjS2V5IGFzIHN0cmluZ10ucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWU6IFRhcmdldEtleSBhcyBzdHJpbmcsXHJcbiAgICAgICAgICAgIFByZVByb2Nlc3M6IFByZVByb2Nlc3NcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBCaW5kU2VsZlR3b1dheTxGaXJzdERhdGFULCBTZWNEYXRhVCwgVCBleHRlbmRzIFBhZ2VEYXRhPihcclxuICAgICAgICBGaXJzdERhdGE6IGtleW9mIFQsXHJcbiAgICAgICAgU2VjRGF0YToga2V5b2YgVCxcclxuICAgICAgICBGaXJzdFRvU2VjUHJlUHJvY2Vzcz86ICh2YWx1ZTogRmlyc3REYXRhVCkgPT4gU2VjRGF0YVQsXHJcbiAgICAgICAgU2VjVG9GaXJzdFByZVByb2Nlc3M/OiAodmFsdWU6IFNlY0RhdGFUKSA9PiBGaXJzdERhdGFUXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLkJpbmRTZWxmPEZpcnN0RGF0YVQsIFQ+KEZpcnN0RGF0YSwgU2VjRGF0YSwgRmlyc3RUb1NlY1ByZVByb2Nlc3MpO1xyXG4gICAgICAgIHRoaXMuQmluZFNlbGY8U2VjRGF0YVQsIFQ+KFNlY0RhdGEsIEZpcnN0RGF0YSwgU2VjVG9GaXJzdFByZVByb2Nlc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBSZW5kZXI8VCBleHRlbmRzIFBhZ2VEYXRhPih2YWx1ZTogUGFydGlhbDxSZWNvcmQ8a2V5b2YgVCwgYW55Pj4pIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXI8VD4odmFsdWUsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBSZW5kZXJOb0JhY2t3YXJkPFQgZXh0ZW5kcyBQYWdlRGF0YT4odmFsdWU6IFBhcnRpYWw8UmVjb3JkPGtleW9mIFQsIGFueT4+KSB7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyPFQ+KHZhbHVlLCB0cnVlKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBDb21wb25lbnREYXRhS2V5UGFpcjpSZWNvcmQ8c3RyaW5nLHtrZXk6c3RyaW5nLENvbXBJbnN0OlBlc3Vkb0NvbXBuZW50fT4gPSB7fTtcclxuICAgIHByaXZhdGUgX3JlbmRlcjxUIGV4dGVuZHMgUGFnZURhdGE+KHZhbHVlOiBQYXJ0aWFsPFJlY29yZDxrZXlvZiBULCBhbnk+PiwgRGlzYWJsZUJhY2t3YXJkOiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IE1vZGlmaWVkID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IEtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSlcclxuICAgICAgICB0eXBlIERhdGFLZXlzID0ga2V5b2YgVDtcclxuICAgICAgICBLZXlzLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgaWYodGhpcy5Db21wb25lbnREYXRhS2V5UGFpcltrZXldKXtcclxuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5Db21wb25lbnREYXRhS2V5UGFpcltrZXldLkNvbXBJbnN0LmRhdGFbdGhpcy5Db21wb25lbnREYXRhS2V5UGFpcltrZXldLmtleV09dmFsdWVba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5SZWdpc3RlcmVkU2VsZkJpbmRpbmdba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5SZWdpc3RlcmVkU2VsZkJpbmRpbmdba2V5XS5mb3JFYWNoKCh0YXJnZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoS2V5cy5pbmRleE9mKHRhcmdldC5uYW1lIGFzIHN0cmluZykgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1vZGlmaWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5QcmVQcm9jZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVt0YXJnZXQubmFtZSBhcyBEYXRhS2V5c10gPSB0YXJnZXQuUHJlUHJvY2Vzcyh2YWx1ZVtrZXkgYXMgRGF0YUtleXNdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlW3RhcmdldC5uYW1lIGFzIERhdGFLZXlzXSA9IHZhbHVlW2tleSBhcyBEYXRhS2V5c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghRGlzYWJsZUJhY2t3YXJkICYmIHRoaXMuUmVnaXN0ZXJlZEdsb2JhbEJhY2tXYXJkQmluZGluZ1trZXldKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlJlZ2lzdGVyZWRHbG9iYWxCYWNrV2FyZEJpbmRpbmdba2V5XS5mb3JFYWNoKHRhcmdldCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LlRhcmdldERhdGFPYmouU2V0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuUHJlUHJvY2VzcyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuUHJlUHJvY2Vzcyh2YWx1ZVtrZXkgYXMgRGF0YUtleXNdKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVtrZXkgYXMgRGF0YUtleXNdKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoTW9kaWZpZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyPFQ+KHZhbHVlLCBEaXNhYmxlQmFja3dhcmQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgcHJvdGVjdGVkIExvYWRQZXN1ZG9Db21wb25lbnRzKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBCYXNlRnVuY3Rpb25zID0gT2JqZWN0LmtleXModGhpcyk7XHJcbiAgICAgICAgbGV0IGNvbXBvbmVudHMgPSB0aGlzLlBlc3Vkb0NvbXBuZW50cyBhcyBSZWNvcmQ8c3RyaW5nLCBQZXN1ZG9Db21wbmVudD47XHJcbiAgICAgICAgT2JqZWN0LmtleXMoY29tcG9uZW50cykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgQ29tcCA9IGNvbXBvbmVudHNba2V5XTtcclxuICAgICAgICAgICAgQ29tcC5QYWdlSW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgICAgICBDb21wLl9yZW5kZXIgPSB0aGlzLlJlbmRlci5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICBsZXQgQ29tcFByb3RvID0gQ29tcDtcclxuICAgICAgICAgICAgbGV0IENvbXBJZCA9IGNvbXBvbmVudHNba2V5XS5Db21wb25lbnRJZDtcclxuICAgICAgICAgICAgd2hpbGUgKENvbXBQcm90bykge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoQ29tcFByb3RvKS5mb3JFYWNoKGtleSA9PiB7IFxyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKEJhc2VGdW5jdGlvbnMuaW5kZXhPZihrZXkpIDwgMCApIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIENvbXBQcm90b1trZXldID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW0NvbXBJZCArIGtleV0gPSBDb21wUHJvdG9ba2V5XS5iaW5kKENvbXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIENvbXBQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb21wUHJvdG8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBDb21wRGF0YTogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xyXG4gICAgICAgICAgICB2YXIgTWFwcGluZ0NvbXBEYXRhID0ge31cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGNvbXBvbmVudHNba2V5XS5kYXRhKS5mb3JFYWNoKGRhdGFrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBDb21wRGF0YVtDb21wSWQgKyBkYXRha2V5XSA9IGNvbXBvbmVudHNba2V5XS5kYXRhW2RhdGFrZXldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5Db21wb25lbnREYXRhS2V5UGFpcltDb21wSWQgKyBkYXRha2V5XT17XHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiBkYXRha2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIENvbXBJbnN0OmNvbXBvbmVudHNba2V5XVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFwcGluZ0NvbXBEYXRhLCBkYXRha2V5LCB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgZ2V0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5kYXRhW0NvbXBJZCArIGRhdGFrZXldO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIH0sXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgc2V0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLmRhdGFbQ29tcElkICsgZGF0YWtleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIC8vICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAvL2NvbXBvbmVudHNba2V5XS5kYXRhID0gTWFwcGluZ0NvbXBEYXRhO1xyXG4gICAgICAgICAgICB0aGlzLlJlbmRlcihDb21wRGF0YSk7XHJcbiAgICAgICAgICAgIENvbXAuSW5pdCgpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIERhdGFDaGFuZ2UoZTpJdWlPcHRpb24pe1xyXG4gICAgICAgIGxldCBtb2RlbCA9IGUgYXMgRGF0YUNoYW5nZU9wdGlvbjtcclxuICAgICAgICBsZXQgcGF0aCA9IG1vZGVsLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5rZXkuc3BsaXQoXCIuXCIpO1xyXG4gICAgICAgIGxldCBkYXRhOlJlY29yZDxzdHJpbmcsYW55PiA9IHt9XHJcbiAgICAgICAgbGV0IHJvb3QgPSBkYXRhO1xyXG4gICAgICAgIGZvcihsZXQgaT0wO2k8cGF0aC5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgaWYoaT09cGF0aC5sZW5ndGgtMSl7XHJcbiAgICAgICAgICAgICAgICBkYXRhW3BhdGhbaV1dPW1vZGVsLmRldGFpbC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiBkYXRhW3BhdGhbaV1dPT1cIm51bWJlclwiKXtcclxuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZGF0YVtwYXRoW2ldXT1OdW1iZXIodGhpcy5kYXRhW3BhdGhbaV1dKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGRhdGFbcGF0aFtpXV09dGhpcy5kYXRhW3BhdGhbaV1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRhdGE9ZGF0YVtwYXRoW2ldXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5SZW5kZXIocm9vdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIExvYWRFeHRlbmRzKCkge1xyXG4gICAgICAgIHRoaXMuRnVuYy5QYWdlSW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuRnVuYy5Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5VSS5QYWdlSW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuVUkuSW5pdCgpO1xyXG4gICAgICAgIHRoaXMuVUkuSW5pdEN1c3RvbURhdGEoKTtcclxuICAgICAgICB0aGlzLkZ1bmMuSW5pdEN1c3RvbURhdGEoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgSW5QYXJhbWV0ZXI6IGFueVxyXG5cclxuICAgIHB1YmxpYyBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5JblBhcmFtZXRlciA9IFJvdXRlci5OYXZpZ2F0ZVBhcmFtO1xyXG4gICAgICAgIFJvdXRlci5QYWdlTG9hZCh0aGlzKTtcclxuICAgICAgICBpZiAodGhpcy5Mb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5Mb2FkZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5Mb2FkUGVzdWRvQ29tcG9uZW50cygpO1xyXG4gICAgICAgIHRoaXMuTG9hZEV4dGVuZHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25VbmxvYWQoKSB7XHJcbiAgICAgICAgUm91dGVyLlBhZ2VVbmxvYWQoKTtcclxuICAgIH1cclxufTsiXX0=