"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = exports.TaskGroup = void 0;
var TaskGroup = (function () {
    function TaskGroup() {
        this.TaskArray = new Array();
        this.CompleteCounter = 0;
    }
    TaskGroup.prototype.Add = function (task) {
        this.TaskArray.push(task);
    };
    TaskGroup.prototype.AllTask = function () {
        var _this = this;
        var task = new Task(function () {
            _this.TaskArray.forEach(function (value) {
                value.ContinueWith(function () {
                    _this.CompleteCounter++;
                    if (_this.CompleteCounter == _this.TaskArray.length) {
                        task.Continue(_this.TaskArray);
                    }
                }).Run();
            });
        }, true);
        return task;
    };
    return TaskGroup;
}());
exports.TaskGroup = TaskGroup;
var Task = (function () {
    function Task(action, _IsCallbackTask) {
        var _this = this;
        this.IsCallbackTask = false;
        this.Run = function () {
            if (_this.Action) {
                var ActionResult = _this.Action(_this);
                if (ActionResult) {
                    _this.Result = ActionResult;
                }
            }
            if (!_this.IsCallbackTask) {
                _this._continue();
            }
            return _this;
        };
        this.Action = action;
        this.IsCallbackTask = _IsCallbackTask ? _IsCallbackTask : false;
        this.Root = this;
    }
    Task.Group = function (TaskGroupObj) {
        var group = new TaskGroup();
        Object.keys(TaskGroupObj).forEach(function (key) {
            group.Add(TaskGroupObj[key]);
        });
        var group_task = new Task(function (task) {
            group.AllTask().ContinueWith(function () {
                task.Continue(TaskGroupObj);
            }).Run();
        }, true);
        return group_task;
    };
    Task.Delay = function (ms) {
        return new Task(function (task) {
            setTimeout(function () {
                task.Continue();
            }, ms);
        }, true);
    };
    Task.Run = function (action) {
        var task = new Task(action);
        return task.Run();
    };
    Task.prototype._continue = function (result) {
        if (result) {
            this.Result = result;
        }
        if (this.ContinueAction) {
            var ContinueResult = this.ContinueAction(this.Result, this.NextTask);
            this.NextTask.Result = ContinueResult;
            if (!this.NextTask.IsCallbackTask) {
                this.NextTask._continue();
            }
        }
        return this;
    };
    Task.prototype.Continue = function (result) {
        this.IsCallbackTask = true;
        return this._continue(result);
    };
    Task.prototype.ContinueWith = function (Action, _IsCallbackTask) {
        this.ContinueAction = Action;
        this.NextTask = new Task();
        this.NextTask.Root = this.Root;
        this.NextTask.IsCallbackTask = _IsCallbackTask ? _IsCallbackTask : false;
        this.NextTask.Run = this.Root.Run.bind(this.Root);
        return this.NextTask;
    };
    Task.prototype.ContinueWithTask = function (NextTask) {
        return this.ContinueWith(function (_, task) {
            NextTask.ContinueWith(function (result) {
                task.Continue(result);
            }).Run();
        }, true);
    };
    Task.prototype.Delay = function (ms) {
        return this.ContinueWithTask(Task.Delay(ms));
    };
    Task.PrintFlow = function (task) {
        var root = task.Root;
        var currentTask = root;
        while (currentTask) {
            currentTask = currentTask.NextTask;
        }
    };
    return Task;
}());
exports.Task = Task;
//# sourceMappingURL=data:application/json;base64,