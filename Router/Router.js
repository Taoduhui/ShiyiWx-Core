"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = void 0;
var Router_Config_1 = require("../Config/RouterConfig/Router.Config");
var Task_1 = require("../Task/Task");
var Utils_1 = require("../Utils/Utils");
var Router = (function () {
    function Router() {
    }
    Router.TryGetMapPath = function (name, CurrentPath, map) {
        for (var i = 0; i < map.length; i++) {
            var a = CurrentPath + "/" + (map[i].isDir ? Router_Config_1.DirectoryName[map[i].name] : Router_Config_1.PageName[map[i].name]);
            var Res = Router.TryGetMapPath(name, CurrentPath + "/" + (map[i].isDir ? Router_Config_1.DirectoryName[map[i].name] : Router_Config_1.PageName[map[i].name]), map[i].children);
            if (Res) {
                return Res;
            }
            if (map[i].name == name && !map[i].isDir) {
                return CurrentPath + "/" + (map[i].isDir ? Router_Config_1.DirectoryName[map[i].name] : Router_Config_1.PageName[map[i].name]) + "/" + Router_Config_1.PageName[map[i].name];
            }
        }
        return "";
    };
    Router.GetPagePath = function (name) {
        var Path = Router.TryGetMapPath(name, "/pages", Router_Config_1.PageMap);
        if (Path) {
            return Path;
        }
        else {
            return "/pages/" + Router_Config_1.PageName[name] + "/" + Router_Config_1.PageName[name];
        }
    };
    Router.PageLoad = function (page) {
        if (Router.WaitForBackTaskStacks.length > 0 && !Router.WaitForBackTaskStacks[Router.WaitForBackTaskStacks.length - 1].pageInstance) {
            Router.WaitForBackTaskStacks[Router.WaitForBackTaskStacks.length - 1].pageInstance = page;
        }
        Router.PageStacks.push(page);
        (0, Utils_1.Debug)(5)("PageLoaded", page);
    };
    Router.PageUnload = function () {
        var e_1, _a;
        var Observers = Router.RegisteredDataObservers.get(Router.CurrentPage);
        if (Observers) {
            try {
                for (var Observers_1 = __values(Observers), Observers_1_1 = Observers_1.next(); !Observers_1_1.done; Observers_1_1 = Observers_1.next()) {
                    var Notification = Observers_1_1.value;
                    Notification(Router.CurrentPage);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (Observers_1_1 && !Observers_1_1.done && (_a = Observers_1.return)) _a.call(Observers_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        var page = Router.PageStacks.pop();
        (0, Utils_1.Debug)(5)("PageUnload", page);
        if (page) {
            if (Router.WaitForBackTaskStacks[Router.WaitForBackTaskStacks.length - 1].pageInstance == page) {
                Router.WaitForBackTaskStacks[Router.WaitForBackTaskStacks.length - 1].task.Continue(Router.NavigatebackParam);
                Router.WaitForBackTaskStacks.pop();
            }
        }
        Router.NavigatebackParam = {};
    };
    Router.RegisterPageUnLoaded = function (page, notification) {
        var Observers = Router.RegisteredDataObservers.get(page);
        if (!Observers) {
            Observers = new Array();
        }
        Observers.push(notification);
        Router.RegisteredDataObservers.set(page, Observers);
    };
    Router.NavigateTo = function (name, param) {
        Router.NavigateParam = param ? param : undefined;
        wx.navigateTo({
            url: Router.GetPagePath(name)
        });
        var task = new Task_1.Task(function () { }, true);
        Router.WaitForBackTaskStacks.push({
            task: task,
            pageInstance: undefined
        });
        return task;
    };
    Router.NavigateBack = function (Param) {
        Router.NavigatebackParam = Param;
        wx.navigateBack();
    };
    Object.defineProperty(Router.prototype, "CurrentPage", {
        get: function () {
            return Router.PageStacks[Router.PageStacks.length - 1];
        },
        enumerable: false,
        configurable: true
    });
    Router.PageStacks = new Array();
    Router.RegisteredDataObservers = new Map();
    Router.WaitForBackTaskStacks = new Array();
    Router.NavigatebackParam = {};
    return Router;
}());
exports.Router = Router;
//# sourceMappingURL=data:application/json;base64,