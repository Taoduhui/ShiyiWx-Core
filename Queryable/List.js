"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = void 0;
var List = (function () {
    function List(data) {
        this.Data = [];
        this.Data = data ? data : [];
    }
    Object.defineProperty(List.prototype, "o", {
        get: function () {
            return this.Data;
        },
        enumerable: false,
        configurable: true
    });
    List.prototype.First = function () {
        return this.Data[0];
    };
    List.prototype.Reverse = function () {
        return List.Ref(this.Clone().o.reverse());
    };
    List.prototype.Clone = function () {
        return List.New(this.o);
    };
    List.prototype.At = function (index) {
        return this.o[index];
    };
    List.prototype.Set = function (index, item) {
        return this.o[index] = item;
    };
    List.prototype.Distinct = function (selector) {
        var temp = new List();
        var result = new List();
        this.Data.forEach(function (value) {
            var key = selector(value);
            if (!temp.Contains(key)) {
                result.Add(value);
                temp.Add(key);
            }
        });
        return result;
    };
    List.Ref = function (data) {
        return new List(data);
    };
    List.New = function (data) {
        var NewData = [];
        data.forEach(function (item) {
            NewData.push(item);
        });
        return new List(NewData);
    };
    List.prototype.Add = function (item) {
        this.Data.push(item);
        return this;
    };
    List.prototype.AddRange = function (OtherList) {
        this.Data = this.Data.concat(OtherList.o);
        return this;
    };
    Object.defineProperty(List.prototype, "ForEach", {
        get: function () {
            return this.o.forEach;
        },
        enumerable: false,
        configurable: true
    });
    List.prototype.Insert = function (index, item) {
        this.Data.splice(index, 0, item);
        return this;
    };
    List.prototype.ToArray = function () {
        return this.o;
    };
    List.prototype.Remove = function (item) {
        this.Data.splice(this.Data.indexOf(item), 1);
        return this;
    };
    List.prototype.RemoveAt = function (index) {
        this.Data.splice(index, 0);
        return this;
    };
    List.prototype.Where = function (selector) {
        var Result = new List();
        this.Data.forEach(function (value) {
            if (selector(value)) {
                Result.Add(value);
            }
        });
        return Result;
    };
    List.prototype.Select = function (selector) {
        var Result = new List();
        this.Data.forEach(function (value) {
            Result.Add(selector(value));
        });
        return Result;
    };
    List.prototype.Contains = function (item) {
        return this.Data.indexOf((item)) >= 0;
    };
    List.prototype.Count = function (item) {
        if (item) {
            var cnt_1 = 0;
            this.Data.forEach(function (i) {
                if (i == item) {
                    cnt_1++;
                }
            });
            return cnt_1;
        }
        return this.Data.length;
    };
    List.prototype.Single = function (selector) {
        var result = null;
        this.Data.forEach(function (item) {
            if (selector(item)) {
                result = item;
            }
        });
        return result;
    };
    List.prototype.ConvertAll = function (convertor) {
        var Result = new List();
        this.Data.forEach(function (item) {
            Result.Add(convertor(item));
        });
        return Result;
    };
    List.prototype.Skip = function (num) {
        this.o.splice(0, num);
        return this;
    };
    List.prototype.Take = function (num) {
        return List.New(this.o.splice(0, num));
    };
    return List;
}());
exports.List = List;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7SUFRSSxjQUFZLElBQWM7UUFObEIsU0FBSSxHQUFVLEVBQUUsQ0FBQztRQU9yQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFBLENBQUMsQ0FBQSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQU5ELHNCQUFXLG1CQUFDO2FBQVo7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFNTSxvQkFBSyxHQUFaO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxzQkFBTyxHQUFkO1FBQ0ksT0FBUSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU0sb0JBQUssR0FBWjtRQUNJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLGlCQUFFLEdBQVQsVUFBVSxLQUFZO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sa0JBQUcsR0FBVixVQUFXLEtBQVksRUFBQyxJQUFNO1FBQzFCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVNLHVCQUFRLEdBQWYsVUFBZ0IsUUFBc0I7UUFDbEMsSUFBSSxJQUFJLEdBQUMsSUFBSSxJQUFJLEVBQU8sQ0FBQztRQUN6QixJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUNuQixJQUFJLEdBQUcsR0FBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0IsSUFBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUM7Z0JBQ25CLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDakI7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFYSxRQUFHLEdBQWpCLFVBQXFCLElBQWE7UUFDOUIsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRWEsUUFBRyxHQUFqQixVQUFxQixJQUFhO1FBQzlCLElBQUksT0FBTyxHQUFVLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtZQUNiLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLElBQUksSUFBSSxDQUFJLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxrQkFBRyxHQUFWLFVBQVcsSUFBTTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSx1QkFBUSxHQUFmLFVBQWdCLFNBQWlCO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxzQkFBVyx5QkFBTzthQUFsQjtZQUNJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUE7UUFDekIsQ0FBQzs7O09BQUE7SUFFTSxxQkFBTSxHQUFiLFVBQWMsS0FBWSxFQUFDLElBQU07UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sc0JBQU8sR0FBZDtRQUNJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRU0scUJBQU0sR0FBYixVQUFjLElBQU07UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLHVCQUFRLEdBQWYsVUFBZ0IsS0FBWTtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLG9CQUFLLEdBQVosVUFBYSxRQUEyQjtRQUNwQyxJQUFJLE1BQU0sR0FBVyxJQUFJLElBQUksRUFBSyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUNuQixJQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBQztnQkFDZixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3JCO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRU0scUJBQU0sR0FBYixVQUFtQixRQUFzQjtRQUNyQyxJQUFJLE1BQU0sR0FBYSxJQUFJLElBQUksRUFBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUNuQixNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVNLHVCQUFRLEdBQWYsVUFBZ0IsSUFBTTtRQUNsQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLG9CQUFLLEdBQVosVUFBYSxJQUFPO1FBQ2hCLElBQUcsSUFBSSxFQUFDO1lBQ0osSUFBSSxLQUFHLEdBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO2dCQUNmLElBQUcsQ0FBQyxJQUFFLElBQUksRUFBQztvQkFDUCxLQUFHLEVBQUUsQ0FBQztpQkFDVDtZQUNMLENBQUMsQ0FBQyxDQUFBO1lBQ0YsT0FBTyxLQUFHLENBQUM7U0FDZDtRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDNUIsQ0FBQztJQUVNLHFCQUFNLEdBQWIsVUFBYyxRQUEyQjtRQUNyQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO1lBQ2xCLElBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFDO2dCQUNkLE1BQU0sR0FBRyxJQUFJLENBQUM7YUFDakI7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFJTSx5QkFBVSxHQUFqQixVQUEyQixTQUEyQjtRQUNsRCxJQUFJLE1BQU0sR0FBZSxJQUFJLElBQUksRUFBVyxDQUFDO1FBQzdDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtZQUNsQixNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVNLG1CQUFJLEdBQVgsVUFBWSxHQUFVO1FBQ2xCLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sbUJBQUksR0FBWCxVQUFZLEdBQVU7UUFDbEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ3pDLENBQUM7SUFHTCxXQUFDO0FBQUQsQ0FBQyxBQTNKRCxJQTJKQztBQTNKWSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBMaXN0PFQ+e1xyXG5cclxuICAgIHByaXZhdGUgRGF0YTpBcnJheTxUPj1bXTtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IG8oKTpBcnJheTxUPntcclxuICAgICAgICByZXR1cm4gdGhpcy5EYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OkFycmF5PFQ+KXtcclxuICAgICAgICB0aGlzLkRhdGEgPSBkYXRhP2RhdGE6W107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEZpcnN0KCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuRGF0YVswXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUmV2ZXJzZSgpe1xyXG4gICAgICAgIHJldHVybiAgTGlzdC5SZWYodGhpcy5DbG9uZSgpLm8ucmV2ZXJzZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ2xvbmUoKXtcclxuICAgICAgICByZXR1cm4gTGlzdC5OZXcodGhpcy5vKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQXQoaW5kZXg6bnVtYmVyKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5vW2luZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgU2V0KGluZGV4Om51bWJlcixpdGVtOlQpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9baW5kZXhdPWl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIERpc3RpbmN0KHNlbGVjdG9yOihpdGVtOlQpPT5hbnkpe1xyXG4gICAgICAgIGxldCB0ZW1wPW5ldyBMaXN0PGFueT4oKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IExpc3Q8VD4oKTtcclxuICAgICAgICB0aGlzLkRhdGEuZm9yRWFjaCh2YWx1ZT0+e1xyXG4gICAgICAgICAgICBsZXQga2V5ID0gIHNlbGVjdG9yKHZhbHVlKTtcclxuICAgICAgICAgICAgaWYoIXRlbXAuQ29udGFpbnMoa2V5KSl7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuQWRkKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHRlbXAuQWRkKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBSZWY8VD4oZGF0YTpBcnJheTxUPik6TGlzdDxUPntcclxuICAgICAgICByZXR1cm4gbmV3IExpc3QoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBOZXc8VD4oZGF0YTpBcnJheTxUPik6TGlzdDxUPntcclxuICAgICAgICBsZXQgTmV3RGF0YTpBcnJheTxUPj1bXTtcclxuICAgICAgICBkYXRhLmZvckVhY2goaXRlbSA9PntcclxuICAgICAgICAgICAgTmV3RGF0YS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0PFQ+KE5ld0RhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBBZGQoaXRlbTpUKXtcclxuICAgICAgICB0aGlzLkRhdGEucHVzaChpdGVtKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQWRkUmFuZ2UoT3RoZXJMaXN0Okxpc3Q8VD4pe1xyXG4gICAgICAgIHRoaXMuRGF0YSA9IHRoaXMuRGF0YS5jb25jYXQoT3RoZXJMaXN0Lm8pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgRm9yRWFjaCgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLm8uZm9yRWFjaFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBJbnNlcnQoaW5kZXg6bnVtYmVyLGl0ZW06VCl7XHJcbiAgICAgICAgdGhpcy5EYXRhLnNwbGljZShpbmRleCwwLGl0ZW0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBUb0FycmF5KCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUmVtb3ZlKGl0ZW06VCl7XHJcbiAgICAgICAgdGhpcy5EYXRhLnNwbGljZSh0aGlzLkRhdGEuaW5kZXhPZihpdGVtKSwxKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUmVtb3ZlQXQoaW5kZXg6bnVtYmVyKXtcclxuICAgICAgICB0aGlzLkRhdGEuc3BsaWNlKGluZGV4LDApO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBXaGVyZShzZWxlY3RvcjoodmFsdWU6VCk9PmJvb2xlYW4pe1xyXG4gICAgICAgIGxldCBSZXN1bHQ6TGlzdDxUPiA9IG5ldyBMaXN0PFQ+KCk7XHJcbiAgICAgICAgdGhpcy5EYXRhLmZvckVhY2godmFsdWU9PntcclxuICAgICAgICAgICAgaWYoc2VsZWN0b3IodmFsdWUpKXtcclxuICAgICAgICAgICAgICAgIFJlc3VsdC5BZGQodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gUmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZWxlY3Q8U19UPihzZWxlY3RvcjooaXRlbTpUKT0+U19UKXtcclxuICAgICAgICBsZXQgUmVzdWx0Okxpc3Q8U19UPiA9IG5ldyBMaXN0PFNfVD4oKTtcclxuICAgICAgICB0aGlzLkRhdGEuZm9yRWFjaCh2YWx1ZT0+e1xyXG4gICAgICAgICAgICBSZXN1bHQuQWRkKHNlbGVjdG9yKHZhbHVlKSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gUmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb250YWlucyhpdGVtOlQpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLkRhdGEuaW5kZXhPZigoaXRlbSkpPj0wO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb3VudChpdGVtPzpUKXtcclxuICAgICAgICBpZihpdGVtKXtcclxuICAgICAgICAgICAgbGV0IGNudD0wO1xyXG4gICAgICAgICAgICB0aGlzLkRhdGEuZm9yRWFjaChpPT57XHJcbiAgICAgICAgICAgICAgICBpZihpPT1pdGVtKXtcclxuICAgICAgICAgICAgICAgICAgICBjbnQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcmV0dXJuIGNudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuRGF0YS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFNpbmdsZShzZWxlY3RvcjoodmFsdWU6VCk9PmJvb2xlYW4pOm51bGx8VHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLkRhdGEuZm9yRWFjaChpdGVtPT57XHJcbiAgICAgICAgICAgIGlmKHNlbGVjdG9yKGl0ZW0pKXtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydEFsbDxPdXRwdXRUPihjb252ZXJ0b3I6KGl0ZW06VCk9Pk91dHB1dFQpOkxpc3Q8T3V0cHV0VD57XHJcbiAgICAgICAgbGV0IFJlc3VsdDpMaXN0PE91dHB1dFQ+PW5ldyBMaXN0PE91dHB1dFQ+KCk7XHJcbiAgICAgICAgdGhpcy5EYXRhLmZvckVhY2goaXRlbT0+e1xyXG4gICAgICAgICAgICBSZXN1bHQuQWRkKGNvbnZlcnRvcihpdGVtKSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gUmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTa2lwKG51bTpudW1iZXIpe1xyXG4gICAgICAgIHRoaXMuby5zcGxpY2UoMCxudW0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBUYWtlKG51bTpudW1iZXIpe1xyXG4gICAgICAgIHJldHVybiBMaXN0Lk5ldyh0aGlzLm8uc3BsaWNlKDAsbnVtKSlcclxuICAgIH1cclxuXHJcbiAgICBcclxufSJdfQ==